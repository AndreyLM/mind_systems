// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/andreylm/mind_systems/pkg/ent/token"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TokenCreate is the builder for creating a Token entity.
type TokenCreate struct {
	config
	url           *string
	url_shortened *string
}

// SetURL sets the url field.
func (tc *TokenCreate) SetURL(s string) *TokenCreate {
	tc.url = &s
	return tc
}

// SetURLShortened sets the url_shortened field.
func (tc *TokenCreate) SetURLShortened(s string) *TokenCreate {
	tc.url_shortened = &s
	return tc
}

// Save creates the Token in the database.
func (tc *TokenCreate) Save(ctx context.Context) (*Token, error) {
	if tc.url == nil {
		return nil, errors.New("ent: missing required field \"url\"")
	}
	if tc.url_shortened == nil {
		return nil, errors.New("ent: missing required field \"url_shortened\"")
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TokenCreate) SaveX(ctx context.Context) *Token {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TokenCreate) sqlSave(ctx context.Context) (*Token, error) {
	var (
		t     = &Token{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: token.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: token.FieldID,
			},
		}
	)
	if value := tc.url; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: token.FieldURL,
		})
		t.URL = *value
	}
	if value := tc.url_shortened; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: token.FieldURLShortened,
		})
		t.URLShortened = *value
	}
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	t.ID = int(id)
	return t, nil
}
